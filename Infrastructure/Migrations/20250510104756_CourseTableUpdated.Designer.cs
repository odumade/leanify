// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250510104756_CourseTableUpdated")]
    partial class CourseTableUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Programming"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Business"
                        });
                });

            modelBuilder.Entity("Entity.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,1)");

                    b.Property<int>("Students")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5dee3c1-d269-4a20-aef0-df83e60332ed"),
                            CategoryId = 1,
                            Instructor = "John Doe",
                            LastUpdated = new DateTime(2025, 5, 10, 10, 47, 55, 630, DateTimeKind.Utc).AddTicks(712),
                            Price = 99.99f,
                            Rating = 4.8m,
                            Students = 0,
                            Title = "C# Masterclass"
                        },
                        new
                        {
                            Id = new Guid("025ab58a-006a-4706-943a-5f1ca8f57426"),
                            CategoryId = 2,
                            Instructor = "Jane Smith",
                            LastUpdated = new DateTime(2025, 5, 10, 10, 47, 55, 630, DateTimeKind.Utc).AddTicks(733),
                            Price = 79.99f,
                            Rating = 4.6m,
                            Students = 0,
                            Title = "Web Design"
                        });
                });

            modelBuilder.Entity("Entity.Learning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequirementId");

                    b.ToTable("Learnings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = new Guid("b5dee3c1-d269-4a20-aef0-df83e60332ed"),
                            Name = "OOP Principles"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = new Guid("b5dee3c1-d269-4a20-aef0-df83e60332ed"),
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = new Guid("025ab58a-006a-4706-943a-5f1ca8f57426"),
                            Name = "Responsive Design"
                        });
                });

            modelBuilder.Entity("Entity.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Requirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = new Guid("b5dee3c1-d269-4a20-aef0-df83e60332ed"),
                            Name = "Basic programming"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = new Guid("b5dee3c1-d269-4a20-aef0-df83e60332ed"),
                            Name = "Visual Studio"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = new Guid("025ab58a-006a-4706-943a-5f1ca8f57426"),
                            Name = "Creative mindset"
                        });
                });

            modelBuilder.Entity("Entity.Course", b =>
                {
                    b.HasOne("Entity.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entity.Learning", b =>
                {
                    b.HasOne("Entity.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Requirement", null)
                        .WithMany("Learnings")
                        .HasForeignKey("RequirementId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entity.Requirement", b =>
                {
                    b.HasOne("Entity.Course", "Course")
                        .WithMany("Requirements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entity.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Entity.Course", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Entity.Requirement", b =>
                {
                    b.Navigation("Learnings");
                });
#pragma warning restore 612, 618
        }
    }
}
